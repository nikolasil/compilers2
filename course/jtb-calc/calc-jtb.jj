//
// Generated by JTB 1.3.2 DIT@UoA patched
//

options {
   JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(CalcParser)
import syntaxtree.*;
import java.util.Vector;


public class CalcParser 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CalcParser)

SKIP :
{
   " "
   | "\t"
   | "\r"
   | "\f"
   | "\n"
}

TOKEN :
{
   <LPAR: "(">
   | <RPAR: ")">
   | <PLUS: "+">
   | <MINUS: "-">
   | <MULT: "*">
   | <DIV: "/">
}

TOKEN :
{
   <NUMBER: (["0"-"9"])+>
}

Goal Goal() :
{
   Exp n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Exp()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new Goal(n0,n1); }
}

Exp Exp() :
{
   Term n0;
   NodeOptional n1 = new NodeOptional();
   Exp2 n2;

   
}
{
   n0=Term()
   (
      n2=Exp2()
      { n1.addNode(n2); }
   )?
   
   { return new Exp(n0,n1); }
}

Exp2 Exp2() :
{
   NodeChoice n0;
   PlusExp n1;
   MinusExp n2;

   
}
{
   (
      n1=PlusExp()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=MinusExp()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Exp2(n0); }
}

PlusExp PlusExp() :
{
   NodeToken n0;
   Token n1;
   Term n2;
   NodeOptional n3 = new NodeOptional();
   Exp2 n4;

   
}
{
   n1="+" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Term()
   (
      n4=Exp2()
      { n3.addNode(n4); }
   )?
   
   { return new PlusExp(n0,n2,n3); }
}

MinusExp MinusExp() :
{
   NodeToken n0;
   Token n1;
   Term n2;
   NodeOptional n3 = new NodeOptional();
   Exp2 n4;

   
}
{
   n1="-" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Term()
   (
      n4=Exp2()
      { n3.addNode(n4); }
   )?
   
   { return new MinusExp(n0,n2,n3); }
}

Term Term() :
{
   Factor n0;
   NodeOptional n1 = new NodeOptional();
   Term2 n2;

   
}
{
   n0=Factor()
   (
      n2=Term2()
      { n1.addNode(n2); }
   )?
   
   { return new Term(n0,n1); }
}

Term2 Term2() :
{
   NodeChoice n0;
   TimesExp n1;
   DivExp n2;

   
}
{
   (
      n1=TimesExp()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=DivExp()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Term2(n0); }
}

TimesExp TimesExp() :
{
   NodeToken n0;
   Token n1;
   Factor n2;
   NodeOptional n3 = new NodeOptional();
   Term2 n4;

   
}
{
   n1="*" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Factor()
   (
      n4=Term2()
      { n3.addNode(n4); }
   )?
   
   { return new TimesExp(n0,n2,n3); }
}

DivExp DivExp() :
{
   NodeToken n0;
   Token n1;
   Factor n2;
   NodeOptional n3 = new NodeOptional();
   Term2 n4;

   
}
{
   n1="/" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Factor()
   (
      n4=Term2()
      { n3.addNode(n4); }
   )?
   
   { return new DivExp(n0,n2,n3); }
}

Factor Factor() :
{
   NodeChoice n0;
   Num n1;
   ParExp n2;

   
}
{
   (
      n1=Num()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=ParExp()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Factor(n0); }
}

Num Num() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<NUMBER> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Num(n0); }
}

ParExp ParExp() :
{
   NodeToken n0;
   Token n1;
   Exp n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Exp()
   n4=")" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ParExp(n0,n2,n3); }
}
