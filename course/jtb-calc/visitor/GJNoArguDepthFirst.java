//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         if (n.size() == 1)
            return n.elementAt(0).accept(this);
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      if (n.size() == 1)
         return n.elementAt(0).accept(this);
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Exp()
    * f1 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Term()
    * f1 -> [ Exp2() ]
    */
   public R visit(Exp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> PlusExp()
    *       | MinusExp()
    */
   public R visit(Exp2 n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "+"
    * f1 -> Term()
    * f2 -> [ Exp2() ]
    */
   public R visit(PlusExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "-"
    * f1 -> Term()
    * f2 -> [ Exp2() ]
    */
   public R visit(MinusExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Factor()
    * f1 -> [ Term2() ]
    */
   public R visit(Term n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> TimesExp()
    *       | DivExp()
    */
   public R visit(Term2 n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "*"
    * f1 -> Factor()
    * f2 -> [ Term2() ]
    */
   public R visit(TimesExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "/"
    * f1 -> Factor()
    * f2 -> [ Term2() ]
    */
   public R visit(DivExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Num()
    *       | ParExp()
    */
   public R visit(Factor n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> <NUMBER>
    */
   public R visit(Num n) {
      return n.f0.accept(this);
   }

   /**
    * f0 -> "("
    * f1 -> Exp()
    * f2 -> ")"
    */
   public R visit(ParExp n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

}
