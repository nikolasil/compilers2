//
// Generated by JTB 1.3.2 DIT@UoA patched
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if ( n.present() )
         n.node.accept(this,argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> Exp()
    * f1 -> <EOF>
    */
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Term()
    * f1 -> [ Exp2() ]
    */
   public void visit(Exp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> PlusExp()
    *       | MinusExp()
    */
   public void visit(Exp2 n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "+"
    * f1 -> Term()
    * f2 -> [ Exp2() ]
    */
   public void visit(PlusExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "-"
    * f1 -> Term()
    * f2 -> [ Exp2() ]
    */
   public void visit(MinusExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Factor()
    * f1 -> [ Term2() ]
    */
   public void visit(Term n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> TimesExp()
    *       | DivExp()
    */
   public void visit(Term2 n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "*"
    * f1 -> Factor()
    * f2 -> [ Term2() ]
    */
   public void visit(TimesExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "/"
    * f1 -> Factor()
    * f2 -> [ Term2() ]
    */
   public void visit(DivExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Num()
    *       | ParExp()
    */
   public void visit(Factor n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <NUMBER>
    */
   public void visit(Num n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "("
    * f1 -> Exp()
    * f2 -> ")"
    */
   public void visit(ParExp n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

}
